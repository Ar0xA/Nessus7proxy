import spynner, sys, os, shutil
from bs4 import BeautifulSoup

#we have to wait for the page to be rendered, so DOM items exist
def wait_for_render(browser,secs):
    try:
        browser.wait_load(secs)
    except:
        pass
    return

def login(browser, username, password):
    print ("Logging in, one moment.")
    browser.wk_fill('input[class="required login-username"]',username)
    browser.wk_fill('input[class="required login-password"]', password)
    browser.click('button[data-domselect="sign-in"]')
    wait_for_render(browser,5)
    findstr = 'type="password"'
    if findstr in browser.html:
        print ("Login failed :(")
        return False
    else:
        return True

def get_scan_status(doc,scanname):
    soup = BeautifulSoup(doc,'lxml')
    #find the table with the results
    resultset = soup.find("table", {"class": "scans dataTable no-footer"})
    #lets find the dataset we need
    resultset2 = soup.find("tr", {"data-name": scanname})
    return resultset2.attrs['data-status']

def download_report(browser, scanname):
    scandom = "td[data-order=\""+scanname+"\"]"
    browser.click(scandom)
    wait_for_render(browser,5)
    print ("Downloading the report, one moment")
    wait_for_render(browser,5)
    browser.click('li[data-value="nessus"]',wait_load=True)
    print ("We should have the report now, checking.")
    #it will be in "hostname/tokens/{token}/download"
    for root, dirs, files in os.walk(hostname):
        for file in files:
            if file.startswith("download"):
                reportname = os.path.join(root,file)
                if os.path.getsize(reportname) > 200:
                    print ("OK, valid report.")
                    file = open(reportname,'r')
                    content = BeautifulSoup(file, 'lxml')
                    result = content.report.find("tag", {"name": "HOST_END_TIMESTAMP"})
                    #ok so now move it to the main dir
                    #calling it <reportname>.<scandate>.nessus
                    newname = "./"  + scanname + "." + result.get_text() + ".nessus" 
                    shutil.move(reportname,newname)
                    shutil.rmtree(hostname)
                    print ("Done. Report saved as %s " % (newname))
                    return True
                else:
                    print ("Invalid report size, try again.")
                    return False

def download_report(browser, scanname):
    #get status
    print ("\n\nTrying to get scan status for scan: %s." % (scanname))
    status = get_scan_status(browser.html, scanname)

    if status == "completed":
        print ("Scan is done. Lets download the latest report.")
        #the download can sometimes fail because of ajax rendering craps up.
        result = False
        while not result:
            result = download_report(browser, scanname)
    else:
        print ("Cannot download the report, status is not \"complete\" but \"%s\"." % (status))
        sys.exit(1)

#main
hostname = "localhost:8834"
scanname = sys.argv[1]
username = ""
password = ""

#if hostname directory exists, remove it..old generated by spynner auto download.
if os.path.exists(hostname):
    print ("Old file dir exists, cleaning up.")
    shutil.rmtree(hostname)

browser = spynner.Browser(debug_level=spynner.ERROR, ignore_ssl_errors = True)
browser.create_webview(True)
browser.load("https://"+hostname)
wait_for_render(browser,1)

#logging in
if login(browser, username, password):
    download_report(browser, scanname)
